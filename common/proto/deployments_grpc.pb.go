// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeploymentServiceClient is the client API for DeploymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentServiceClient interface {
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (DeploymentService_ListDeploymentsClient, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
	GetDeploymentLogs(ctx context.Context, in *GetDeploymentLogsRequest, opts ...grpc.CallOption) (DeploymentService_GetDeploymentLogsClient, error)
	ScheduleDeployment(ctx context.Context, in *ScheduleDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error)
}

type deploymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentServiceClient(cc grpc.ClientConnInterface) DeploymentServiceClient {
	return &deploymentServiceClient{cc}
}

func (c *deploymentServiceClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (DeploymentService_ListDeploymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeploymentService_ServiceDesc.Streams[0], "/oceannik.DeploymentService/ListDeployments", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentServiceListDeploymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeploymentService_ListDeploymentsClient interface {
	Recv() (*Deployment, error)
	grpc.ClientStream
}

type deploymentServiceListDeploymentsClient struct {
	grpc.ClientStream
}

func (x *deploymentServiceListDeploymentsClient) Recv() (*Deployment, error) {
	m := new(Deployment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/oceannik.DeploymentService/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentServiceClient) GetDeploymentLogs(ctx context.Context, in *GetDeploymentLogsRequest, opts ...grpc.CallOption) (DeploymentService_GetDeploymentLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &DeploymentService_ServiceDesc.Streams[1], "/oceannik.DeploymentService/GetDeploymentLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &deploymentServiceGetDeploymentLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeploymentService_GetDeploymentLogsClient interface {
	Recv() (*DeploymentLogChunk, error)
	grpc.ClientStream
}

type deploymentServiceGetDeploymentLogsClient struct {
	grpc.ClientStream
}

func (x *deploymentServiceGetDeploymentLogsClient) Recv() (*DeploymentLogChunk, error) {
	m := new(DeploymentLogChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deploymentServiceClient) ScheduleDeployment(ctx context.Context, in *ScheduleDeploymentRequest, opts ...grpc.CallOption) (*Deployment, error) {
	out := new(Deployment)
	err := c.cc.Invoke(ctx, "/oceannik.DeploymentService/ScheduleDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentServiceServer is the server API for DeploymentService service.
// All implementations must embed UnimplementedDeploymentServiceServer
// for forward compatibility
type DeploymentServiceServer interface {
	ListDeployments(*ListDeploymentsRequest, DeploymentService_ListDeploymentsServer) error
	GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error)
	GetDeploymentLogs(*GetDeploymentLogsRequest, DeploymentService_GetDeploymentLogsServer) error
	ScheduleDeployment(context.Context, *ScheduleDeploymentRequest) (*Deployment, error)
	mustEmbedUnimplementedDeploymentServiceServer()
}

// UnimplementedDeploymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentServiceServer struct {
}

func (UnimplementedDeploymentServiceServer) ListDeployments(*ListDeploymentsRequest, DeploymentService_ListDeploymentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedDeploymentServiceServer) GetDeployment(context.Context, *GetDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDeploymentServiceServer) GetDeploymentLogs(*GetDeploymentLogsRequest, DeploymentService_GetDeploymentLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDeploymentLogs not implemented")
}
func (UnimplementedDeploymentServiceServer) ScheduleDeployment(context.Context, *ScheduleDeploymentRequest) (*Deployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleDeployment not implemented")
}
func (UnimplementedDeploymentServiceServer) mustEmbedUnimplementedDeploymentServiceServer() {}

// UnsafeDeploymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServiceServer will
// result in compilation errors.
type UnsafeDeploymentServiceServer interface {
	mustEmbedUnimplementedDeploymentServiceServer()
}

func RegisterDeploymentServiceServer(s grpc.ServiceRegistrar, srv DeploymentServiceServer) {
	s.RegisterService(&DeploymentService_ServiceDesc, srv)
}

func _DeploymentService_ListDeployments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDeploymentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServiceServer).ListDeployments(m, &deploymentServiceListDeploymentsServer{stream})
}

type DeploymentService_ListDeploymentsServer interface {
	Send(*Deployment) error
	grpc.ServerStream
}

type deploymentServiceListDeploymentsServer struct {
	grpc.ServerStream
}

func (x *deploymentServiceListDeploymentsServer) Send(m *Deployment) error {
	return x.ServerStream.SendMsg(m)
}

func _DeploymentService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oceannik.DeploymentService/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentService_GetDeploymentLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDeploymentLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeploymentServiceServer).GetDeploymentLogs(m, &deploymentServiceGetDeploymentLogsServer{stream})
}

type DeploymentService_GetDeploymentLogsServer interface {
	Send(*DeploymentLogChunk) error
	grpc.ServerStream
}

type deploymentServiceGetDeploymentLogsServer struct {
	grpc.ServerStream
}

func (x *deploymentServiceGetDeploymentLogsServer) Send(m *DeploymentLogChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _DeploymentService_ScheduleDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServiceServer).ScheduleDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oceannik.DeploymentService/ScheduleDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServiceServer).ScheduleDeployment(ctx, req.(*ScheduleDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentService_ServiceDesc is the grpc.ServiceDesc for DeploymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oceannik.DeploymentService",
	HandlerType: (*DeploymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentService_GetDeployment_Handler,
		},
		{
			MethodName: "ScheduleDeployment",
			Handler:    _DeploymentService_ScheduleDeployment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDeployments",
			Handler:       _DeploymentService_ListDeployments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeploymentLogs",
			Handler:       _DeploymentService_GetDeploymentLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/deployments.proto",
}
